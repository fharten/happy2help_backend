{
	"info": {
		"_postman_id": "happy2help-api-tests",
		"name": "Happy2Help API Authorization Tests",
		"description": "Comprehensive API testing collection for Happy2Help backend with authorization validation for Admin, User, and NGO roles",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login Admin User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.exist;",
									"    pm.expect(response.data.accessToken).to.exist;",
									"    pm.collectionVariables.set(\"admin_token\", response.data.accessToken);",
									"    pm.collectionVariables.set(\"admin_refresh_token\", response.data.refreshToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user1@example.com\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/users/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"login"
							]
						}
					}
				},
				{
					"name": "Login Regular User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.exist;",
									"    pm.expect(response.data.accessToken).to.exist;",
									"    pm.collectionVariables.set(\"user_token\", response.data.accessToken);",
									"    pm.collectionVariables.set(\"user_refresh_token\", response.data.refreshToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"user2@example.com\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/users/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"users",
								"login"
							]
						}
					}
				},
				{
					"name": "Login NGO User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"NGO login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.exist;",
									"    pm.expect(response.data.accessToken).to.exist;",
									"    pm.collectionVariables.set(\"ngo_token\", response.data.accessToken);",
									"    pm.collectionVariables.set(\"ngo_refresh_token\", response.data.refreshToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"ngo1@example.com\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/ngos/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"ngos",
								"login"
							]
						}
					}
				}
			]
		},
		{
			"name": "Auth Routes - Admin Protected",
			"item": [
				{
					"name": "Ban User (Admin Access)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin can access ban endpoint\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400, 404]);",
									"    pm.expect(pm.response.code).to.not.equal(401);",
									"    pm.expect(pm.response.code).to.not.equal(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"test-user-id\",\n  \"entityType\": \"user\",\n  \"reason\": \"Test ban\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/ban",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"ban"
							]
						}
					}
				},
				{
					"name": "Ban User (User Access - Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Regular user denied access to ban endpoint\", function () {",
									"    pm.response.to.have.status(403);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(response.message).to.include(\"permissions\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"test-user-id\",\n  \"entityType\": \"user\",\n  \"reason\": \"Test ban\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/ban",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"ban"
							]
						}
					}
				},
				{
					"name": "Ban User (NGO Access - Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"NGO user denied access to ban endpoint\", function () {",
									"    pm.response.to.have.status(403);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(response.message).to.include(\"permissions\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ngo_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"test-user-id\",\n  \"entityType\": \"user\",\n  \"reason\": \"Test ban\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/ban",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"ban"
							]
						}
					}
				}
			]
		},
		{
			"name": "User Routes",
			"item": [
				{
					"name": "Get All Users (Admin Access)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin can get all users\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					}
				},
				{
					"name": "Get All Users (User Access - Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Regular user denied access to all users\", function () {",
									"    pm.response.to.have.status(403);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								""
							]
						}
					}
				},
				{
					"name": "Get Active Users (Admin Access)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin can get active users\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/active",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"active"
							]
						}
					}
				},
				{
					"name": "Get Active Users (NGO Access)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"NGO can get active users\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ngo_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/active",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"active"
							]
						}
					}
				},
				{
					"name": "Get Active Users (User Access - Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Regular user denied access to active users\", function () {",
									"    pm.response.to.have.status(403);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/users/active",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"active"
							]
						}
					}
				}
			]
		},
		{
			"name": "NGO Routes",
			"item": [
				{
					"name": "Get All NGOs (Admin Access)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin can get all NGOs (or fails due to typo)\", function () {",
									"    // Note: Route has 'adminn' typo, so this might fail with 403",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 403]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/ngos/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"ngos",
								""
							]
						}
					}
				},
				{
					"name": "Get All NGOs (User Access - Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Regular user denied access to all NGOs\", function () {",
									"    pm.response.to.have.status(403);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/ngos/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"ngos",
								""
							]
						}
					}
				},
				{
					"name": "Get Activated NGOs (Public Access)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Public can access activated NGOs\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/ngos/activated",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"ngos",
								"activated"
							]
						}
					}
				}
			]
		},
		{
			"name": "Project Routes",
			"item": [
				{
					"name": "Get All Projects (Public Access)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Public can access all projects\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/projects/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								""
							]
						}
					}
				},
				{
					"name": "Create Project (NGO Access)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"NGO can create project\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400]);",
									"    pm.expect(pm.response.code).to.not.equal(401);",
									"    pm.expect(pm.response.code).to.not.equal(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ngo_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"Test project description\",\n  \"startDate\": \"2024-01-01\",\n  \"endDate\": \"2024-12-31\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								""
							]
						}
					}
				},
				{
					"name": "Create Project (User Access - Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Regular user denied project creation\", function () {",
									"    pm.response.to.have.status(403);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Project\",\n  \"description\": \"Test project description\",\n  \"startDate\": \"2024-01-01\",\n  \"endDate\": \"2024-12-31\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/projects/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"projects",
								""
							]
						}
					}
				}
			]
		},
		{
			"name": "Application Routes",
			"item": [
				{
					"name": "Create Application (User Access)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User can create application\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400]);",
									"    pm.expect(pm.response.code).to.not.equal(401);",
									"    pm.expect(pm.response.code).to.not.equal(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"projectId\": \"test-project-id\",\n  \"message\": \"Test application message\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/applications/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"applications",
								""
							]
						}
					}
				},
				{
					"name": "Create Application (NGO Access - Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"NGO user denied application creation\", function () {",
									"    pm.response.to.have.status(403);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.false;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{ngo_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"projectId\": \"test-project-id\",\n  \"message\": \"Test application message\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/applications/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"applications",
								""
							]
						}
					}
				}
			]
		},
		{
			"name": "Notification Routes",
			"item": [
				{
					"name": "Create Notification (Public Access)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Public can create notification\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 400]);",
									"    const response = pm.response.json();",
									"    if (response.success && response.data) {",
									"        pm.collectionVariables.set(\"test_notification_id\", response.data.id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Notification\",\n  \"description\": \"Test notification description\",\n  \"userId\": \"test-user-id\",\n  \"ngoId\": \"test-ngo-id\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/notifications/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								""
							]
						}
					}
				},
				{
					"name": "Update Notification (Admin Access - Should Fail Without Ownership)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin denied notification update without ownership\", function () {",
									"    // Note: requireOwnerOrRole([]) means no roles bypass ownership",
									"    pm.expect(pm.response.code).to.be.oneOf([403, 404]);",
									"    if (pm.response.code === 403) {",
									"        const response = pm.response.json();",
									"        pm.expect(response.success).to.be.false;",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Notification\",\n  \"read\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/notifications/{{test_notification_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"{{test_notification_id}}"
							]
						}
					}
				},
				{
					"name": "Update Notification (Unauthorized User - Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unauthorized user denied notification update\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([403, 404]);",
									"    if (pm.response.code === 403) {",
									"        const response = pm.response.json();",
									"        pm.expect(response.success).to.be.false;",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{user_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Updated Notification\",\n  \"read\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/notifications/{{test_notification_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"notifications",
								"{{test_notification_id}}"
							]
						}
					}
				}
			]
		},
		{
			"name": "Skill Routes",
			"item": [
				{
					"name": "Get All Skills (Public Access)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Public can access skills\", function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.expect(response.success).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/skills/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"skills",
								""
							]
						}
					}
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3333",
			"type": "string"
		},
		{
			"key": "admin_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "ngo_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "admin_refresh_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_refresh_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "ngo_refresh_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "test_notification_id",
			"value": "",
			"type": "string"
		}
	]
}